# Generated by Django 4.2.10 on 2025-06-30 08:49

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('role', models.CharField(choices=[('admin', 'Administrateur'), ('superviseur', 'Superviseur'), ('agent', 'Agent')], default='agent', max_length=20)),
                ('matricule', models.CharField(help_text="Code unique d'identification du personnel", max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Le matricule doit contenir entre 3 et 20 caractères alphanumériques en majuscules', regex='^[A-Z0-9]{3,20}$')])),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('profession', models.CharField(max_length=50)),
                ('fonction', models.CharField(blank=True, max_length=50, null=True)),
                ('telephone', models.CharField(max_length=15, unique=True, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit contenir entre 8 et 15 chiffres et peut commencer par +', regex='^\\+?1?\\d{8,15}$')])),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Désignez si cet utilisateur doit être traité comme actif. Décochez plutôt que de supprimer les comptes.', verbose_name='Actif')),
                ('is_staff', models.BooleanField(default=False, help_text="Désigne si l'utilisateur peut se connecter au site d'administration.", verbose_name='Statut équipe')),
                ('is_superuser', models.BooleanField(default=False, help_text='Désigne que cet utilisateur a toutes les permissions sans les assigner explicitement.', verbose_name='Statut superutilisateur')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date d'inscription")),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='Dernière connexion')),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, verbose_name='Tentatives de connexion échouées')),
                ('account_locked_until', models.DateTimeField(blank=True, null=True, verbose_name="Compte verrouillé jusqu'à")),
                ('password_change_required', models.BooleanField(default=False, verbose_name='Changement de mot de passe requis')),
                ('password_last_changed', models.DateTimeField(blank=True, null=True, verbose_name='Dernière modification du mot de passe')),
                ('notes', models.TextField(blank=True, help_text='Notes internes pour les administrateurs', verbose_name='Notes administratives')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_users', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_users', to=settings.AUTH_USER_MODEL, verbose_name='Dernière modification par')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'ordering': ['first_name', 'last_name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nom de la catégorie')),
                ('description', models.TextField(verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Catégorie',
                'verbose_name_plural': 'Catégories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40, unique=True)),
                ('ip_address', models.GenericIPAddressField(verbose_name='Adresse IP')),
                ('user_agent', models.TextField(verbose_name='Navigateur')),
                ('login_time', models.DateTimeField(auto_now_add=True, verbose_name='Heure de connexion')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='Dernière activité')),
                ('is_active', models.BooleanField(default=True, verbose_name='Session active')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Session Utilisateur',
                'verbose_name_plural': 'Sessions Utilisateurs',
                'ordering': ['-login_time'],
            },
        ),
        migrations.CreateModel(
            name='UserObjective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('objective_type', models.CharField(choices=[('organizations', "Nombre d'organisations"), ('adherents', "Nombre d'adhérents"), ('interactions', "Nombre d'interactions")], max_length=20, verbose_name="Type d'objectif")),
                ('target_value', models.PositiveIntegerField(verbose_name='Valeur cible')),
                ('current_value', models.PositiveIntegerField(default=0, verbose_name='Valeur actuelle')),
                ('deadline', models.DateField(verbose_name='Date limite')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('in_progress', 'En cours'), ('completed', 'Terminé'), ('failed', 'Échoué')], default='pending', max_length=20, verbose_name='Statut')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_objectives', to=settings.AUTH_USER_MODEL, verbose_name='Assigné par')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='objectives', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Objectif Utilisateur',
                'verbose_name_plural': 'Objectifs Utilisateurs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifiant', models.IntegerField(unique=True, verbose_name="Identifiant de l'organisation")),
                ('name', models.CharField(max_length=150, verbose_name="Nom de l'organisation")),
                ('monthly_revenue', models.DecimalField(blank=True, decimal_places=2, help_text='En devise locale', max_digits=15, null=True, verbose_name="Chiffre d'affaires mensuel")),
                ('address', models.TextField(verbose_name='Adresse')),
                ('creation_date', models.DateField(blank=True, null=True, verbose_name='Date de création')),
                ('phone', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit contenir entre 8 et 15 chiffres et peut commencer par +', regex='^\\+?1?\\d{8,15}$')], verbose_name='Téléphone')),
                ('whatsapp', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit contenir entre 8 et 15 chiffres et peut commencer par +', regex='^\\+?1?\\d{8,15}$')], verbose_name='WhatsApp')),
                ('number_personnel', models.PositiveIntegerField(default=1, help_text="Nombre total de personne dans l'organisation", verbose_name='Nombre de personne')),
                ('infos_annexes', models.TextField(blank=True, help_text="Informations supplémentaires sur l'organisation", verbose_name='Informations annexes')),
                ('hobies', models.TextField(blank=True, help_text="Hobbies ou centres d'intérêt de l'organisation", verbose_name='Hobbies')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organizations', to='core.category', verbose_name='Catégorie')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_organizations', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
            ],
            options={
                'verbose_name': 'Organisation',
                'verbose_name_plural': 'Organisations',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Adherent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifiant', models.CharField(max_length=20, unique=True, verbose_name='Identifiant unique')),
                ('first_name', models.CharField(max_length=100, verbose_name='Prénom')),
                ('last_name', models.CharField(max_length=100, verbose_name='Nom')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Date de naissance')),
                ('type_adherent', models.CharField(choices=[('physical', 'Personne Physique'), ('legal', 'Personne Morale')], max_length=20, verbose_name="Type d'adhérent")),
                ('commune', models.TextField(verbose_name='Commune')),
                ('quartier', models.TextField(verbose_name='Quartier')),
                ('secteur', models.TextField(verbose_name='Secteur')),
                ('phone1', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit contenir entre 8 et 15 chiffres et peut commencer par +', regex='^\\+?1?\\d{8,15}$')], verbose_name='Téléphone principal')),
                ('phone2', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit contenir entre 8 et 15 chiffres et peut commencer par +', regex='^\\+?1?\\d{8,15}$')], verbose_name='Téléphone secondaire')),
                ('num_urgence1', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit contenir entre 8 et 15 chiffres et peut commencer par +', regex='^\\+?1?\\d{8,15}$')], verbose_name="Numéro d'urgence")),
                ('num_urgence2', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit contenir entre 8 et 15 chiffres et peut commencer par +', regex='^\\+?1?\\d{8,15}$')], verbose_name="Numéro d'urgence 2")),
                ('email', models.EmailField(blank=True, max_length=100, verbose_name='Email')),
                ('medical_info', models.TextField(blank=True, help_text="Informations médicales importantes pour l'adhérent", verbose_name='Informations médicales')),
                ('formation_pro', models.TextField(blank=True, help_text="Détails sur la formation professionnelle de l'adhérent", verbose_name='Formation professionnelle')),
                ('distinction', models.TextField(blank=True, help_text="Distinctions ou récompenses reçues par l'adhérent", verbose_name='Distinction')),
                ('langues', models.TextField(blank=True, help_text="Langues que l'adhérent parle", verbose_name='Langues parlées')),
                ('join_date', models.DateField(verbose_name="Date d'adhésion")),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/', verbose_name='Photo de profil')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='adherents', to='core.organization', verbose_name='Organisation')),
            ],
            options={
                'verbose_name': 'Adhérent',
                'verbose_name_plural': 'Adhérents',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='UserActionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('login', 'Connexion'), ('logout', 'Déconnexion'), ('password_change', 'Changement de mot de passe'), ('password_reset', 'Réinitialisation de mot de passe'), ('account_locked', 'Compte verrouillé'), ('account_unlocked', 'Compte déverrouillé'), ('user_created', 'Utilisateur créé'), ('user_modified', 'Utilisateur modifié'), ('user_deactivated', 'Utilisateur désactivé'), ('user_activated', 'Utilisateur activé'), ('data_access', 'Accès aux données'), ('data_modification', 'Modification des données')], max_length=20, verbose_name='Action')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Horodatage')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Adresse IP')),
                ('success', models.BooleanField(default=True, verbose_name='Succès')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='action_logs', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Journal des Actions',
                'verbose_name_plural': 'Journaux des Actions',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'timestamp'], name='core_userac_user_id_9ccfb2_idx'), models.Index(fields=['action', 'timestamp'], name='core_userac_action_c8e369_idx')],
            },
        ),
        migrations.CreateModel(
            name='SupervisorStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organizations_count', models.PositiveIntegerField(default=0, verbose_name="Nombre d'organisations")),
                ('categories_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de catégories')),
                ('adherents_count', models.PositiveIntegerField(default=0, verbose_name="Nombre d'adhérents")),
                ('interactions_count', models.PositiveIntegerField(default=0, verbose_name="Nombre d'interactions")),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agent_stats', to=settings.AUTH_USER_MODEL, verbose_name='Agent')),
                ('supervisor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='supervisor_stats', to=settings.AUTH_USER_MODEL, verbose_name='Superviseur')),
            ],
            options={
                'verbose_name': 'Statistique Superviseur',
                'verbose_name_plural': 'Statistiques Superviseurs',
                'ordering': ['-last_updated'],
                'unique_together': {('supervisor', 'agent')},
            },
        ),
        migrations.CreateModel(
            name='Interaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifiant', models.CharField(max_length=20, unique=True, verbose_name='Identifiant')),
                ('date_enregistrement', models.DateTimeField(auto_now_add=True, verbose_name="Date d'enregistrement")),
                ('report', models.TextField(verbose_name='Rapport')),
                ('due_date', models.DateTimeField(verbose_name="Date d'échéance")),
                ('status', models.CharField(choices=[('in_progress', 'En cours'), ('completed', 'Terminé'), ('cancelled', 'Annulé')], default='in_progress', max_length=20, verbose_name='Statut')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Mis à jour le')),
                ('adherent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='core.adherent', verbose_name='Adhérent')),
                ('personnel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to=settings.AUTH_USER_MODEL, verbose_name='Personnel')),
            ],
            options={
                'verbose_name': 'Interaction',
                'verbose_name_plural': 'Interactions',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['identifiant'], name='core_intera_identif_f86c33_idx'), models.Index(fields=['status'], name='core_intera_status_cecb73_idx'), models.Index(fields=['created_at'], name='core_intera_created_5254ce_idx')],
            },
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('badge_number', models.CharField(max_length=20, unique=True, verbose_name='Numéro de badge')),
                ('qr_code', models.ImageField(blank=True, null=True, upload_to='badge_qr_codes/', verbose_name='QR Code')),
                ('status', models.CharField(choices=[('active', 'Actif'), ('expired', 'Expiré'), ('revoked', 'Révoqué')], default='active', max_length=20, verbose_name='Statut')),
                ('issued_date', models.DateTimeField(auto_now_add=True, verbose_name="Date d'émission")),
                ('activity_name', models.CharField(max_length=100, verbose_name="Nom de l'activité")),
                ('badge_validity', models.DateField(verbose_name='Validité du badge')),
                ('activity_image', models.ImageField(blank=True, null=True, upload_to='activity_images/', verbose_name="Image de l'activité")),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('adherent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to='core.adherent', verbose_name='Adhérent')),
                ('issued_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='issued_badges', to=settings.AUTH_USER_MODEL, verbose_name='Émis par')),
            ],
            options={
                'verbose_name': 'Badge',
                'verbose_name_plural': 'Badges',
                'ordering': ['-issued_date'],
                'indexes': [models.Index(fields=['badge_number'], name='core_badge_badge_n_98db59_idx'), models.Index(fields=['status'], name='core_badge_status_a8b912_idx'), models.Index(fields=['issued_date'], name='core_badge_issued__137889_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='adherent',
            index=models.Index(fields=['identifiant'], name='core_adhere_identif_38bc87_idx'),
        ),
        migrations.AddIndex(
            model_name='adherent',
            index=models.Index(fields=['join_date'], name='core_adhere_join_da_f6d641_idx'),
        ),
    ]
